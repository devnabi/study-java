package javajungsuk6;

public class Ch06_1 {

	public static void main(String[] args) {
		// 6-1 객체지향언어
		
		// 객체지향언어 = 프로그래밍 언어 + 객체지향개념(규칙)
		// 절차적언어는 순서대로, 객체지향언어는 그렇지 않다.
		// 객체지향언어의 핵심 특징(oop) - 캡슐화, 상속, 추상화, 다형성 / 캡상추다
		
		// 절차적언어에 비해 객체지향언어의 장점
		System.out.println("1. 코드 재사용성 - 다른사람이 쉽게 사용할 수 있도록 하는 것");
		System.out.println("2. 유지보수 용이 - 유지보수를 해서 소프트웨어가 변경되더라도 적은 노력으로 그 변화에 대응할 수 있게 하는 것");
		System.out.println("3. 중복코드제거 - 중복코드 제거 기능이 많다.");
		
		System.out.println("핵심 특징 4가지 중 다형성이 가장 중요하고 이해해야 객체지향개념을 이해할 때 도움된다.");
		
		// 객체지향 개념은 어떻게 공부해야 하나요? >> 6장 전체와 7장 다형성을 여러번 보고 이 정도면 되겠다 싶을 때 다음 것 시작하기
		System.out.println("7장은 다형성이 나오는데 그것을 이해하지 못하면 그 다음의 것들을 공부해도 소용이 없기 때문에 꼭 여러번 보고 가자.");
		System.out.println("규칙이기 때문에 이해보다는 외워야 한다."); // 규칙이 왜 생겼는지는 따지지 않기
		System.out.println("나만의 요약정리를 하고 매일 한번씩 읽어주는 것이 도움된다."); // 요약정리는 6장과 7장에 있는 다형성
		System.out.println("8장, 9장... 이어서 공부할 때에도 반복해서 읽어주는 것이 도움된다.");
		
		// 웹에 관심이 있다면 JSP, Spring / 모바일은 안드로이드
		System.out.println("객체지향개념을 이해는 했지만 설계가 잘 되지 않는다면 이론서를 공부하지 말고 실습을 해서 실력을 키워야 한다.");
		// 이해만으로는 설계를 잘하기는 어려운 것이 당연하다. 그것을 인정하고 더 연습하기
	}

}
